// <auto-generated />
using System;
using AspNetChat.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspNetChat.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231007144324_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatName = "Chat1",
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 767, DateTimeKind.Utc).AddTicks(7408),
                            CreatedByUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChatName = "Chat2",
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 767, DateTimeKind.Utc).AddTicks(7410),
                            CreatedByUserId = 2
                        });
                });

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            Content = "Hello from User1 in Chat1",
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 768, DateTimeKind.Utc).AddTicks(2738),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 2,
                            Content = "Hello from User2 in Chat2",
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 768, DateTimeKind.Utc).AddTicks(2740),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 768, DateTimeKind.Utc).AddTicks(9368),
                            Name = "Сергей",
                            Surname = "Kalachev"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 768, DateTimeKind.Utc).AddTicks(9370),
                            Name = "Gleb",
                            Surname = "Ponteleev"
                        });
                });

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 768, DateTimeKind.Utc).AddTicks(7153),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 768, DateTimeKind.Utc).AddTicks(7155),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ChatId = 2,
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 768, DateTimeKind.Utc).AddTicks(7156),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            ChatId = 2,
                            CreatedAt = new DateTime(2023, 10, 7, 14, 43, 24, 768, DateTimeKind.Utc).AddTicks(7157),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("AspNetChat.DataAccess.Entities.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("AspNetChat.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetChat.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("AspNetChat.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetChat.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("AspNetChat.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });
#pragma warning restore 612, 618
        }
    }
}
